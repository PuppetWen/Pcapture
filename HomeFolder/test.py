import binascii
import re
import hexdump
import sys

byte = b'2e6\r\n\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\x03\x8dT\xcdn\x131\x10~\x97\xe5HP\xb2\x9b\xa6\x9b\xec\t!\xe0T\t\x90\x10\x12B\xc8\xf2\xda\xb3\x89[\xc7\xb6\xfc\x93&T\xbdr\xe2\x00\xea\x01\xae\xf0\x00\x9c\x10oT\x15\xde\x82\xb1w\xb7l\xd3J e\xa3\xf1x\xe6\xf3\xe7\x99o|\x96\t\x9eU\xf9l\x94)\xba\x86\xac\xca\xae\xbe\x7f\xbd\xfa\xf8\xfe\xf2\xd3\x97l\x94Q\xc6tP\x9e\\\x87\x80?\xd5\xf6$\xad\xa7\xa3\xcc\x08\xb5\x13\ns\x96\x81*)v\xf8\x8fI+\xc19\xa0\xd7\xdb\x00\xa3,8\xb0\x84i\x1e\xa1\'\x93\xbc\xc2\x0fc8\x18?\xf0\xf6\x9e\x88\x8bL(\xf3b\x03h\xb7\x10.8\x03\x8aG\xc7d\x94\xb9\x95\xb6\x9e\xfc=Z\xee0\xdbj\t\x1d\x1e\x86$\xf4&HI\xba;]~\xf8\xfc\xfb\xe2\'^\xeb\xd7\x8fo)Z{\xc2\xf5\x9a\n\xd5_E\xea%.\xbap\xca\xd7B=\xacw\x92\xc5`\xa0=\x8eB\xc8\x11\xd6\x8b\xa8\xb0\xae\xc1f\xd5\x9e\x83\xf8\x9d\xc1{"\x83\xeb$B\x8d\xb1:]\xa6\xa1\xd2aA\x04o\xb3\xc9\x86J\x84\xe2\xd4cJ\x0b\x94x[h\x12\xa9\xd6\xc5\xb4\xda\x80u\xd4\x0b\xad\x1ci\x00x\xdb\x8c\xc9\x1c\xcbd\x04\tVba\xc7h\x8e7\xf98\x16\xdb\x8d\xf3\x19\xd2>\x85\xba\xdb\xbc7\xf0\xd2\r\xf5\xd4\xf6Yf\xa5\xbdv\xe3b\xcagMQ\x96l^@Y,x\xb1(9,\xe6u=\x9b\x16\xf3\xbaXD4\xec:\x13\x96a\x95k\xcaN\x96\x16e\xc1\xf7\x0e\xef\xd0\xee\x0c\x1dshh\x90\xde!V/*\xb6\xa2JA\xa2\x1f\xc6\xab\xe6i\xf1:\x7f\x1c\x9e?y\xf5\xec\xb0<:\x9a\xd6\x8f\x8e\x9b\x17\x18\r\xd8\xa5\x18s\xa3\'\xb1\x0e\x91\x07\x19`D\xe8`\xa4\xa6(\x14\x92\xb8\xf4\xfa9\xd6\xd8Z/\x92\xba\x8bIQ<\xc8\xe3\xefe1E1V\x07\xe5\xfd\xc9\x1c\r\xcc\x8eq\x98\xdb\n\xc3e\xd5\x9b\xb34\x1b(\xf4\xbbe\xa4nNC\'\xa8V\x03\x19l\x81\x85(c\x046\xd4B7EmW\xb1M"\xaa\xaa\x93\x11\x0e\xc6\x14\xc3Xp^\xaf\xf7\xc4\xc5\xc11+L\xec\xff\xb5&P]\x1e\x89R\xff\x8f\x0b\x05\x13\xd5\xf5\x1f\x81\xa9\\{\xaaPZ\xe1HI\x81\xcc#7\xaa\x08l\x05\x9e\x98d|\xfe6NYj\xe9\xde \xa5>\xf5\x95\xd7vI\x95x\x97\xd4Kn\xec\x08Gh\xeb!\xb4\xd6\xa1G\xe9\x13\xd3vW\xd0\xdby\x9a\x85\xbb\xd0\x8c\xb9\xe5\xd5J\xee\xc8 \xbc\x9bA\xd8\xfa\xbc\xaf&\xda\xc5\xc0\x9e\x0e\xec\x83\x81=\x1b\xd8\x87\x03\xbb\x1c\xd8\xf3\x81\xbd\x18\xd8\xf9\xa4_\xdc\xa6\x82\x0cQu\xd8\xc8\xb5\xae\x85\x8cj\xe9\x04\x14\xa7\x16W\xceS\x9c\x9a\xea,k\xb4\x94\xfa\x14\xe7;=0\xedJ\xa8%.\xcbs\x94\x18\xd8\xb5p.\xa9$>\xe6\xb05\xf1\x99\xc4\xf9\xe8[\x96\x9eE\x8a>Z\xd7\x166"5\xa5\xe5u\xfe\x07Z\x8b\x1c\x90\x05\x06\x00\x00\r\n0\r\n\r\n'

byte1 = b'\x8b'

string = '''login_name=admin

1%40bylc&nonce=2xZPzZoOCptn'''

bytearry1 = "23,3,3,5,-71,0,0,0,0,0,0,0,1,66,117,-23,-37,-84,34,76,82,53"#",-31,54,-66,-24,119,101,-111,29,-108,45,79,-37,-121,-113,118,72,-101,33,17,-19,41,-116,-92,80,23,-59,77,-65,121,118,38,24,-65,104,-1,66,-82,-127,78,54,-7,83,25,23,-39,20,68,17,15,-23,63,-88,67,94,16,-126,77,-111,-22,-61,104,-6,6,-21,103,-68,-65,22,-50,-35,108,-26,-58,63,-115,-55,71,113,-81,56,-66,89,109,-74,-103,61,-18,90,39,66,-27,-88,-104,49,28,57,-86,-49,11,52,47,-56,49,9,72,-21,-107,-80,43,71,-58,45,100,110,-91,115,-75,-24,-3,1,109,29,-38,-27,-91,-15,97,84,-9,121,38,36,59,-19,80,-42,11,55,59,-111,44,56,107,42,52,-110,90,65,-89,-64,-63,-17,26,-24,0,-108,-109,38,3,-51,-23,-14,120,30,104,2,-117,90,-94,27,68,-79,-124,28,-122,41,-68,-108,75,83,26,84,69,-73,117,-77,-99,14,37,10,53,-39,-15,-97,-17,60,-27,44,24,-8,-36,-101,116,45,-57,-36,-86,21,-34,89,17,-78,115,-92,-34,-96,112,-55,-28,111,-104,76,-86,-74,-1,27,80,108,-49,-18,-100,-107,92,52,118,21,33,90,39,-17,-73,-32,-24,-78,-42,-83,102,-19,-89,-25,104,56,58,84,-110,89,-120,52,82,116,-77,86,-68,111,-85,-114,48,53,-43,-110,-88,41,119,-126,-34,26,-49,119,-69,-126,30,98,78,-9,-87,126,44,-67,107,-30,39,70,97,-93,13,67,-95,22,-40,72,-56,111,-123,-32,42,30,-69,48,-112,71,-103,82,72,39,16,7,11,15,105,96,-116,-116,112,1,-15,58,-56,-59,-58,-48,-18,-27,72,-37,-4,-4,4,119,-31,2,40,84,-77,-57,-18,42,99,-109,-100,-20,-7,-60,37,14,8,1,17,22,-53,33,-117,60,54,87,-108,-1,-6,-106,-127,-67,2,88,9,113,35,121,17,10,114,-91,-97,71,33,-68,65,-87,106,-111,-62,-24,69,-43,-80,98,-29,-75,-4,-60,-4,75,103,-72,111,-56,20,76,-52,-85,-1,88,107,14,29,93,40,-63,-116,36,70,85,111,30,-19,81,-114,33,-45,-99,20,-68,-49,-69,116,-120,47,-50,38,-1,-17,-25,-50,22,126,101,-76,-20,-104,82,-59,-56,56,20,3,-128,94,6,125,82,80,-35,90,-47,-87,-45,-45,-29,-80,48,102,-28,88,97,119,112,61,-3,92,-48,-81,-36,-3,94,82,83,-43,52,-47,-27,40,30,-113,21,-18,77,-54,104,-121,-24,55,-31,3,123,4,81,-62,-71,-7,113,89,13,-10,4,110,-115,67,-95,2,-66,-125,119,90,32,100,42,-86,19,88,-47,1,-112,118,2,75,46,30,11,-119,-12,49,100,41,100,72,93,42,121,-90,42,-3,-81,75,125,116,51,58,-79,13,99,-77,117,106,-102,40,114,-13,107,-128,-45,8,98,-63,-91,-96,-83,-66,-118,122,59,18,39,-47,-6,-71,-43,-19,74,-65,-99,110,-98,126,-20,127,11,74,-114,-46,-90,-93,-118,121,-62,33,-19,-45,29,-118,-17,-24,-33,-6,27,-126,-30,-96,30,96,52,112,-67,-49,-79,0,-78,45,-44,68,91,-51,19,26,-29,-98,56,113,108,-34,-104,-42,67,-21,57,-8,118,-14,27,-70,47,-45,40,-109,-70,-116,25,-28,79,111,84,97,78,102,-126,4,-78,65,26,-110,-55,91,-13,33,-85,-35,-88,61,20,119,40,-11,105,91,66,-105,111,-8,-96,112,35,-92,124,-99,-60,-29,74,105,-30,2,-27,-93,92,-115,21,-33,7,114,107,-111,-105,-19,97,-126,38,-9,65,48,-105,6,-44,-38,-114,-98,-100,127,104,-96,-50,-93,2,-86,68,88,104,-63,101,91,-57,63,106,23,-69,105,-75,-85,87,105,-48,35,-128,-104,-120,64,74,127,-48,-17,111,-86,75,60,-125,-16,59,-111,-80,-115,-106,118,26,19,25,108,-46,-98,-46,-75,15,126,-98,-94,-4,-43,-9,9,-95,-120,-118,-98,66,-15,-46,-25,-106,126,44,-51,-7,-53,52,-80,24,109,-118,-15,-126,38,43,-114,71,74,126,62,88,-15,-40,-32,-110,-128,25,-89,79,-120,-28,73,100,106,-65,77,95,-13,-113,42,-116,10,106,-89,-10,-67,-78,-63,6,58,-79,32,75,1,-92,57,92,-37,-74,71,-81,-73,51,16,-62,-8,-30,-77,-119,43,89,119,62,81,126,-49,112,-102,95,-110,3,-38,119,53,103,6,-49,31,-7,7,-93,-3,-128,15,67,94,-82,31,49,-45,96,3,-110,-28,-89,37,-51,49,12,19,-71,113,-9,75,86,69,26,116,-33,-48,-41,-23,40,27,-83,57,37,49,85,-68,35,7,6,-43,52,106,28,-114,-95,-100,-66,-6,56,-50,-59,54,-97,13,-48,-54,-21,25,94,30,109,-123,117,42,121,57,-54,-5,-17,31,-24,-46,10,-4,45,115,-88,-61,-7,103,57,51,-3,32,-105,58,-98,-65,68,-51,112,105,-89,-14,124,-110,-106,-66,-113,98,-84,-114,-71,-23,108,14,-82,50,86,90,-71,-22,-86,69,-24,84,36,35,82,-70,120,51,11,-30,-113,102,-109,-17,-109,-73,16,-22,-46,-43,2,52,45,78,122,88,56,-62,-71,51,2,19,-78,-55,-125,30,16,39,-18,-39,-62,38,-69,98,-2,38,-121,2,-23,-90,-10,-3,66,-5,-116,-60,79,90,-22,-109,-13,-27,54,123,57,78,-66,-4,-2,31,-128,-45,-89,43,53,-53,-30,57,116,1,-50,50,104,101,-116,96,-79,33,84,70,9,20,20,117,126,-115,48,85,42,-11,-42,67,61,89,63,-6,87,18,-77,-106,98,88,-99,119,67,111,64,-100,-84,5,91,-117,58,15,-10,12,-100,7,-11,-68,108,118,92,97,-93,125,37,-27,119,-21,-119,3,-86,91,-56,8,96,28,71,-20,96,82,-59,-102,-97,48,-40,-26,-11,-6,101,51,79,-62,102,97,108,-120,-33,-43,-126,-118,125,-37,103,-114,67,89,-120,38,-86,-121,38,32,16,-38,-109,44,-49,-101,6,58,-119,-103,76,48,-64,36,42,117,110,-128,24,84,-85,119,83,-21,105,-104,-32,-29,-49,57,31,93,-95,74,80,3,79,91,49,28,63,99,-58,-45,-104,91,83,-40,91,-120,-114,-72,-30,-45,25,-11,74,32,30,121,124,-14,-115,-38,-19,97,121,-102,-95,70,97,59,126,74,-46,-5,-97,-8,-33,-78,30,-92,-34,-108,-77,-62,-116,-84,87,111,9,44,-107,-73,81,-112,-80,124,-91,-45,80,-65,-45,-67,-110,-46,-67,19,-58,15,118,-42,46,-124,6,84,-88,2,-68,-19,77,-116,5,-53,-125,-77,51,51,56,-114,-26,-81,12,34,24,87,107,-54,-18,46,16,-72,-120,76,96,-74,-17,-25,116,26,-74,-4,123,-94,55,-64,37,114,122,68,35,61,-1,123,47,93,78,103,-121,77,-85,-81,-19,-104,-7,1,-68,-121,-101,98,29,-8,9,70,92,89,6,65,-55,-108,-93,60,-51,64,10,-118,-63,68,96,94,122,-110,126,126,-98,-4,43,46,12,119,109,58,-88,30,96,-35,32,42,-84,-66,100,53,-45,-119,-29,117,-76,-54,38,123,-100,99,13,-81,-69,-116,-120,79,39,-72,-28,112,-55,16,78,-106,118,116,-45,-90,109,-78,-7,-109,100,99,93,-73,-12,-16,-108,-121,-13,-91,-89"

bytearry2 = "23,3,3,5,185,0,0,0,0,0,0,0,1,66,117,233,219,172,34,76,82,53"
# 17030305b900000000000000014275e9dbac224c5235
if __name__ == '__main__':
    # encodeA = str.encode(string, encoding='utf-8', errors='ignore')
    # encodeA = string.encode('UTF-8')
    # encodeA = ' '.join([bin(ord(c)).replace('0b', '') for c in byte])
    # print(encodeA)
    #
    # output = binascii.hexlify(byte)
    # print(output)

    # byttt = str.encode(string)
    # print(byttt)
    hexArray = []
    # encodeA = ''.join([hex(ord(c)) for c in string])#.replace('0x','')
    # print(encodeA)
    # for c in string:
    #     hexArray.append("0x%"%binascii.hexlify(c))
    # print(hexArray)

    # data = bytes.decode(byte, encoding='iso-8859-1')
    # print(data)

    param = string
    res = binascii.b2a_hex(param.encode('iso-8859-1')).decode('iso-8859-1')
    # print(type(res))
    newres = res.replace("0a","0d0a")
    print(newres)
    deres = binascii.a2b_hex("17030305b900000000000000014275e9dbac224c5235".encode('iso-8859-1')).decode('iso-8859-1')
    print(deres)
    resss = binascii.b2a_hex(deres.encode('iso-8859-1')).decode('iso-8859-1')
    print(resss)
    text_list = re.findall(".{2}", res)
    for i in text_list:
        if i == "0a":
            hexArray.append("13")
        hexArray.append(str(int(i,16)))
    new_text = (" ".join(hexArray)).replace(" ",",")
    # print(" 编码字符长度  %s, 原本字符长度  %s"%(len(new_text),len(bytearry1.split(","))))
    # print(binascii.hexlify(byte))
    print(new_text)
    # print(bytearry1.split(","))


    # ''.join([chr(i) for i in [int(b, 16) for b in hex_str.split(' ')]])

    # # encodeA = "4854"  # 0x12  0xAB
    # # print(int(encodeA,16))
    # i = 0
    # while (i < len(encodeA)):
    #     s1 = encodeA[i:i + 4]
    #     i += 4
    #     print((int(s1, 16)))

    # encodeA = int(encodeA,16)
    # print(encodeA)
